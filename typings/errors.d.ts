import { Target } from './manifest/types';
import { Registration } from './sources/types';
import { CliErrorCode, CliErrorOptions } from './types';
export declare class CliError extends Error {
    code?: CliErrorCode;
    underlying?: Error;
    constructor(message: string, options?: CliErrorOptions);
}
export declare const unknownCommand: (command: string) => CliError;
export declare const manifestNotFound: (dir: string) => CliError;
export declare const manifestInvalid: (message: string) => CliError;
export declare const manifestOk: (value: any, message: string) => void;
export declare const sourceUnsupported: (type: string) => CliError;
export declare const sourceMisconfiguredRegistry: (registry: string) => CliError;
export declare const sourceNoneMatching: (type: string, source: string) => CliError;
export declare const sourceDownloadFailed: (source: string, underlying: Error) => CliError;
export declare const sourceUnrecognizedType: (type: string) => CliError;
export declare const dependencyNotFound: (dependency: string, registry: string) => CliError;
export declare const dependencyInvalidChecksum: (registration: Registration) => CliError;
export declare const dependencyPathNotFound: (dependency: string, path: string) => CliError;
export declare const dependencyUnknownSource: (dependency: string) => CliError;
export declare const buildInvalid: (message: string) => CliError;
export declare const lockfileWriteFailed: (file: string, underlying: Error) => CliError;
export declare const targetNoMatching: (type: string) => CliError;
export declare const targetNoDefault: () => CliError;
export declare const targetNotFound: (target: Target) => CliError;
export declare const targetIsOpen: (target: Target, path: string) => CliError;
export declare const targetCreateFailed: (target: Target, underlying: Error) => CliError;
export declare const targetImportFailed: (target: Target, underlying: Error) => CliError;
export declare const targetRestoreFailed: (backup: string, file: string, underlying: Error) => CliError;
export declare const targetAddNoType: () => CliError;
export declare const targetAlreadyDefined: () => CliError;
export declare const resolveFailed: (details?: string | undefined) => CliError;
export declare const unrecognizedComponent: (path: string) => CliError;
export declare const componentInvalidNoName: () => CliError;
export declare const runScriptNotFound: (path: string) => CliError;
export declare const newNameRequired: () => CliError;
export declare const newTargetRequired: () => CliError;
export declare const newDirExists: (name: string, dir: string) => CliError;
export declare const fromNotFound: (from: string) => CliError;
export declare const initAlreadyInitialized: () => CliError;
export declare const initNameRequired: () => CliError;
export declare const initTargetRequired: () => CliError;
export declare const exportNoDefault: () => CliError;
export declare const exportNoMatching: (type: string) => CliError;
export declare const exportTargetNotFound: (target: Target, path: string) => CliError;
export declare const addinUnsupportedType: (type: string) => CliError;
export declare const runMissingFile: () => CliError;
export declare const runMissingMacro: () => CliError;
export declare function cleanError(error: string | Error): {
    message: string;
    stack: string;
};
